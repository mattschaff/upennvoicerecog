
'''''''''''''''''''''''''''''''''''''''''''''''''''
Mixed-class speaker recognition using GMMs
'''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''DECOMPRESS FILES'''''''''

'''
from subprocess import Popen, PIPE
import time
import os

mp3files = [os.path.join(root, name)
             for root, dirs, files in os.walk('C:/Users/Henrique/Desktop/DotaMediaFiles')
             for name in files
             if name.endswith((".mp3", ".mp3"))]

FFMPEG_BIN = "C:/Users/Henrique/ffmpeg.exe"
for i in mp3files[:40000]:
    o = 'C:/Users/Henrique/Desktop/DotaMediaFiles\\{}\\{}.wav'.format(
            os.path.splitext(i)[0].split('/')[4].split('\\')[1], 
            os.path.splitext(i)[0].split('/')[4].split('\\')[2])
    if o in wavfiles:
        pass
    else:
        Popen([FFMPEG_BIN,'-i', i, o])
'''

if __name__ == "__main__":
    ''''''''' GET WAV LIST '''''''''
    import os
    
    wavfiles = [os.path.join(root, name)
                 for root, dirs, files in os.walk('C:/Users/Henrique/Desktop/DotaMediaFiles')
                 for name in files
                 if name.endswith((".wav", ".wav"))]
    print('Total files: ',len(wavfiles))

    ''''''''''' FEATURE EXTRACTION '''''''''''
    import numpy as np
    import librosa

    labels =[]
    mfccall = []
    zerocross = []
    pitch_tuning = []
    global_tempo = []
    maxlength = 3

    for i in wavfiles:
        try:
            y, sr = librosa.load(i)
            if len(y) < sr*maxlength:
                pass
            if len(y) > sr*maxlength:
                #trim  down
                y = y[:(sr*maxlength)]
                #MFCC
                new = librosa.feature.mfcc(y, sr,n_mfcc=13)
                mfccall.append(new)
                #Zero Crossing
                zero = librosa.feature.zero_crossing_rate(y)
                zerocross.append(zero)
                #label
                label = os.path.splitext(i)[0].split('/')[4].split('\\')[1]
                labels.append(label)
                #pitch tuning
                pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
                highpitches = pitches[magnitudes > np.median(magnitudes)]
                pitch_tuning.append(librosa.pitch_tuning(highpitches))
                #global tempo
                hop_length = 512
                tempo = librosa.feature.tempogram(y=y, sr=sr,hop_length=hop_length)
                oenv = librosa.onset.onset_strength(y=y, sr=sr, hop_length=hop_length)
                ac_global = librosa.autocorrelate(oenv, max_size=tempo.shape[0])
                ac_global = librosa.util.normalize(ac_global)
                tempo = librosa.beat.tempo(onset_envelope=oenv, sr=sr, hop_length=hop_length)[0]
                global_tempo.append(tempo)
        except:
            pass

    ''''''''''' SAVE RESULTS '''''''''''
    newfile= 'C:/Users/Henrique/Desktop/DotaMediaLabels'
    np.save(newfile,np.array(labels))

    newfile= 'C:/Users/Henrique/Desktop/DotaMediaMFCCS'
    np.save(newfile,np.array(mfccall))

    newfile= 'C:/Users/Henrique/Desktop/DotaMediaZEROS'
    np.save(newfile,np.array(zerocross))

    newfile= 'C:/Users/Henrique/Desktop/DotaMediaFilesTempoGram'
    np.save(newfile,np.array(global_tempo))

    newfile= 'C:/Users/Henrique/Desktop/DotaMediaFilesPitchTuning'
    np.save(newfile,np.array(pitch_tuning))

