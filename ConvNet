actors={'Barry_Dennen':['Chaos_Knight','Phantom_Lancer','Rubick'],
        'Bill_Millsap':['Monkey_King_Announcer_Pack'],
        'Bruce_Miles':['Alchemist','Lifestealer','Omniknight'],
        'Dave_Fennoy':['Batrider','Ember_Spirit','Faceless_Void','Huskar','Jakiro','Skeleton_King','Venomancer','Wraith_King'],
        'David_Scully':['Bane','Dazzle','Juggernaut','Morphling','Sand_King','Sven','Weaver'],
        'David_Sobolov':['Terrorblade'],
        'Dee_Baker':['Techies','Techies_27_Bombastic_Box'],
        'Dempsey_Pappion':['Magnus','Nyx_Assassin','Visage'],
        'Dennis_Bateman':['Invoker'],
        'Ellen_McLain':['Broodmother','Death_Prophet', 'Announcer__Death_Prophet','Portal_Pack'],
        'Eric_Newsome':['Chen','Leshrac','Nature_27s_Prophet','Razor','Tidehunter','Tiny','Zeus'],
        'Fred_Tatasciore':['Disruptor','Spirit_Breaker','Treant_Protector','Undying','Ursa','Warlock_27s_Golem'],
        'Gary_Schwartz':['Lich','Pugna','Shadow_Shaman','Sniper'],
        'Gin_Hammond':['Crystal_Maiden','Crystal_Maiden_Announcer_Pack','Drow_Ranger','Enchantress','Mirana','Phantom_Assassin','Spectre','Vengeful_Spirit','Mercurial_27s_Call'],
        'Harry_Robins':['Tinker','Announcer__Dr._Kleiner'],
        'James_Kirkland':['Arc_Warden'],
        'Jen_Taylor':['Lina','Medusa','Puck','Windranger'],
        'Jim_French':['Elder_Titan'],
        'Jim_Ward':['Defense_Grid_Announcer_Pack'],
        'John_Lowrie':['Ancient_Apparition','Dark_Seer','Doom','Earthshaker','Pudge','Shadow_Fiend','Storm_Spirit'],
        'Jon_St.John':['Axe','Axe_Announcer_Pack','Bloodseeker','Enigma','Kunkka__26_Tidehunter_Announcer_Pack','Kunkka'],
        'Justin_Roiland':[],
        'Kevan_Brighting':[],
        'Linda_Morris':['Luna','Naga_Siren','Queen_of_Pain','Templar_Assassin','Announcer_responses'],
        'Logan_Cunningham':['Bastion_Announcer_Pack'],
        'Matthew_Mercer':[],
        'Merle_Dandridge':['Legion_Commander','Winter_Wyvern'],
        'Michael_Gregory':['Bounty_Hunter','Clinkz'],
        'Michael_Shapiro':['Oracle'],
        'Nolan_North':['Brewmaster','Earth_Spirit','Gyrocopter','Keeper_of_the_Light','Lone_Druid','Lycan','Meepo','Ogre_Magi','Shadow_Demon','Troll_Warlord'],
        'Phil_LaMarr':[],
        'Sam_Mowry':['Anti-Mage','Beastmaster', 'Clockwerk','Clockwerk_Announcer_Pack','Necrophos','Slardar','Warlock','Shopkeeper_responses'],
        'Stephen_Russell':[],
        'Ted_Forsyth':['Pyrion_Flax_Announcer_Pack'],
        'TJ_Ramini':['Abaddon','Bristleback','Bristleback_Announcer_Pack','Skywrath_Mage','Timbersaw','Underlord'],
        'Tom_Chantler':['Centaur_Warrunner','Lion','Outworld_Devourer','Riki','Slark','Tusk','Announcer__Tusk','Witch_Doctor'],
        'Tony_Todd':['Night_Stalker','Dragon_Knight','Viper']
       }

import numpy as np
from sklearn import datasets
from sklearn import metrics
from sklearn import model_selection
from sklearn import preprocessing
from sklearn.utils import shuffle
import tensorflow as tf
import numpy as np

labels = np.load('C:/Users/Henrique/Desktop/DotaMediaLabels.npy')
mfccs = np.load('C:/Users/Henrique/Desktop/DotaMediaMFCCS.npy')
tuning = np.load('C:/Users/Henrique/Desktop/DotaMediaFilesPitchTuning.npy')
tempo = np.load('C:/Users/Henrique/Desktop/DotaMediaFilesTempoGram.npy')
zeros = np.load('C:/Users/Henrique/Desktop/DotaMediaZEROS.npy')

le = preprocessing.LabelEncoder()
le.fit(labels)
numlabels= le.transform(labels)

actorlabels = []
for i in range(len(labels)):
    for j in actors:
        if labels[i] in actors['{}'.format(j)]:
            actorlabels.append(j)
    if len(actorlabels)<i+1:
        actorlabels.append(labels[i])

le2 = preprocessing.LabelEncoder()
le2.fit(actorlabels)
numlabels2= le2.transform(actorlabels)

tempomax = np.max(tempo)
tempomin = np.min(tempo)
tempo = (tempo-tempomin)/(tempomax-tempomin)

tuningmax = np.max(tuning)
tuningmin = np.min(tuning)
tuning = (tuning-tuningmin)/(tuningmax-tuningmin)

X = np.column_stack((mfccs,zeros))
for i in range(X.shape[1]):
    X[:,i,:] = (X[:,i,:] - np.min(X[:,i,:]))/(np.max(X[:,i,:])-np.min(X[:,i,:]))

b = np.repeat(tempo[:, np.newaxis], 14, axis=1)
c = np.repeat(b[:, :, np.newaxis], 1, axis=2)
X = np.concatenate((X,c),axis=2)

b = np.repeat(tuning[:, np.newaxis], 14, axis=1)
c = np.repeat(b[:, :, np.newaxis], 1, axis=2)
X = np.concatenate((X,c),axis=2)


X2,numlabels22 = shuffle(X,numlabels2)
x_train, x_test, y_train, y_test = model_selection.train_test_split(
    X2, numlabels22, test_size=0.1, shuffle=True)
x_train = np.expand_dims(x_train, axis=)
x_test = np.expand_dims(x_test, axis=4)


def create_model2(activation_fn='relu',d1=0.5,d2=0.5,s=100):
    model = tf.keras.models.Sequential()
    
    model.add(tf.keras.layers.Conv2D(14,(7,1),input_shape= (14,132,1),
              activation = 'relu'))
    model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 1)))

    
    model.add(tf.keras.layers.Conv2D(20,(1,8)activation = 'relu'))
    model.add(tf.keras.layers.Dropout(d2))
    model.add(tf.keras.layers.MaxPooling2D(pool_size=(1, 19)))
    
    model.add(tf.keras.layers.Flatten())
    model.add(tf.keras.layers.Dense(units =300, activation='relu')) 
    model.add(tf.keras.layers.Dense(units = 200, activation='relu'))
    model.add(tf.keras.layers.Dense(units = 132, activation='relu'))
    model.add(tf.keras.layers.Dense(units = 36, activation='softmax'))
    
    model.compile(
        loss = 'sparse_categorical_crossentropy',
        optimizer='adam', metrics=['accuracy'])
    return model

model = create_model2(activation_fn=tf.nn.relu,
                      d1=0.1,d2=0.5)
history = model.fit(x_train, y_train, validation_data=(x_test,y_test),
                    epochs=100, batch_size=200, verbose=1)
                    
                    
import matplotlib.pyplot as plt

# Loss Curves
plt.figure(figsize=[8,6])
plt.plot(history.history['loss'],'r',linewidth=3.0)
plt.plot(history.history['val_loss'],'b',linewidth=3.0)
plt.legend(['Training loss', 'Validation Loss'],fontsize=18)
plt.xlabel('Epochs ',fontsize=16)
plt.ylabel('Loss',fontsize=16)
plt.title('Loss Curves',fontsize=16)
plt.show()
 
# Accuracy Curves
plt.figure(figsize=[8,6])
plt.plot(history.history['acc'],'r',linewidth=3.0)
plt.plot(history.history['val_acc'],'b',linewidth=3.0)
plt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)
plt.xlabel('Epochs ',fontsize=16)
plt.ylabel('Accuracy',fontsize=16)
plt.title('Accuracy Curves',fontsize=16)
plt.show()


pred = model.predict(x_test)
dummy_y = tf.keras.utils.to_categorical(y_test)
preds = []
for i in range(pred.shape[0]):
    preds.append(np.argmax(pred[i]))

y_test = le2.inverse_transform(y_test)
preds = le2.inverse_transform(preds)

print('acc: ',metrics.accuracy_score(y_test,preds))
print(metrics.classification_report(y_test,preds))
